{"mappings":"AAAA,QAAQ,GAAG,CAAC,QAAQ,GAAG;AACvB,eAAe,WAAW,KAAK;IAC3B,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE;YAChD,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;YAAM;QACjC;QACA,MAAM,QAAQ,MAAM,SAAS,IAAI;QACjC,OAAO,OAAO,wCAAwC;IAE1D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,EAAE,EAAE,4CAA4C;IAC3D;AACJ;AAEA,MAAM,QAAQ,SAAS,cAAc,CAAC;AACtC,MAAM,WAAW,SAAS,cAAc,CAAC;AAEzC,SAAS,YAAY,KAAK,EAAE,KAAK;IAC7B,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;QACvB,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,EAAE;IACb;IAEA,4CAA4C;IAC5C,MAAM,cAAc,MAAM,GAAG,CAAC,CAAA,MAAO,IAAI,QAAQ;IAEjD,OAAO,YAAY,MAAM,CAAC,CAAA;QACtB,IAAI,OAAO,SAAS,UAAU;YAC1B,QAAQ,KAAK,CAAC,+CAA+C;YAC7D,OAAO;QACX;QACA,OAAO,KAAK,WAAW,GAAG,QAAQ,CAAC,MAAM,WAAW;IACxD;AACJ;AAEA,SAAS,gBAAgB,aAAa;IAClC,SAAS,SAAS,GAAG,IAAI,iCAAiC;IAC1D,IAAI,cAAc,MAAM,GAAG,GAAG;QAC1B,SAAS,KAAK,CAAC,OAAO,GAAG,SAAS,oBAAoB;QACtD,cAAc,OAAO,CAAC,CAAA;YAClB,MAAM,MAAM,SAAS,aAAa,CAAC;YACnC,IAAI,WAAW,GAAG;YAClB,IAAI,gBAAgB,CAAC,SAAS;gBAC1B,MAAM,KAAK,GAAG,MAAM,0CAA0C;gBAC9D,SAAS,KAAK,CAAC,OAAO,GAAG,QAAQ,oBAAoB;YACzD;YACA,SAAS,WAAW,CAAC;QACzB;IACJ,OACI,SAAS,KAAK,CAAC,OAAO,GAAG,QAAQ,wCAAwC;AAEjF;AAEA,iCAAiC;AACjC,MAAM,gBAAgB,CAAC,SAAS;IAC5B,MAAM,QAAQ,MAAM,KAAK;IACzB,IAAI,MAAM,MAAM,GAAG,GAAG;QAClB,MAAM,QAAQ,MAAM,WAAW,QAAQ,8BAA8B;QACrE,MAAM,gBAAgB,YAAY,OAAO,QAAQ,kCAAkC;QACnF,gBAAgB;IACpB,OACI,SAAS,KAAK,CAAC,OAAO,GAAG,QAAQ,sCAAsC;AAE/E;AAEA,0CAA0C;AAC1C,SAAS,gBAAgB,CAAC,SAAS,CAAC;IAChC,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,MAAM,KAAK,CAAC,SAAS,QAAQ,CAAC,MAAM,MAAM,GAChE,SAAS,KAAK,CAAC,OAAO,GAAG;AAEjC","sources":["src/autocomplete.js"],"sourcesContent":["console.log(process.env)\r\nasync function fetchNames(query) {\r\n    try {\r\n        const response = await fetch(`${apiURL}/api/names`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query })\r\n        });\r\n        const names = await response.json();\r\n        return names; // Return the names fetched from the API\r\n        console.log(names)\r\n    } catch (error) {\r\n        console.error('Error fetching names:', error);\r\n        return []; // Return an empty array if there's an error\r\n    }\r\n}\r\n\r\nconst input = document.getElementById('username');\r\nconst nameList = document.getElementById('name-list');\r\n\r\nfunction filterNames(names, query) {\r\n    if (!Array.isArray(names)) {\r\n        console.error('Expected names to be an array, but got:', names);\r\n        return [];\r\n    }\r\n\r\n    // Map to extract `username` and then filter\r\n    const mappedNames = names.map(obj => obj.username);\r\n\r\n    return mappedNames.filter(name => {\r\n        if (typeof name !== 'string') {\r\n            console.error('Expected each name to be a string, but got:', name);\r\n            return false;\r\n        }\r\n        return name.toLowerCase().includes(query.toLowerCase());\r\n    });\r\n}\r\n\r\nfunction showSuggestions(filteredNames) {\r\n    nameList.innerHTML = ''; // Clear the previous suggestions\r\n    if (filteredNames.length > 0) {\r\n        nameList.style.display = 'block'; // Show the dropdown\r\n        filteredNames.forEach(name => {\r\n            const div = document.createElement('div');\r\n            div.textContent = name;\r\n            div.addEventListener('click', () => {\r\n                input.value = name; // Set the input value to the clicked name\r\n                nameList.style.display = 'none'; // Hide the dropdown\r\n            });\r\n            nameList.appendChild(div);\r\n        });\r\n    } else {\r\n        nameList.style.display = 'none'; // Hide the dropdown if no matches found\r\n    }\r\n}\r\n\r\n// Event listener for input field\r\ninput.addEventListener('input', async () => {\r\n    const query = input.value;\r\n    if (query.length > 0) {\r\n        const names = await fetchNames(query); // Fetch names from the server\r\n        const filteredNames = filterNames(names, query); // Filter names based on the input\r\n        showSuggestions(filteredNames);\r\n    } else {\r\n        nameList.style.display = 'none'; // Hide the dropdown if input is empty\r\n    }\r\n});\r\n\r\n// Hide the dropdown when clicking outside\r\ndocument.addEventListener('click', (event) => {\r\n    if (!input.contains(event.target) && !nameList.contains(event.target)) {\r\n        nameList.style.display = 'none';\r\n    }\r\n});"],"names":[],"version":3,"file":"index.fd123e2f.js.map","sourceRoot":"/__parcel_source_root/"}