{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const apiURL = process.env.API_URL;\r\nconst loginForm = document.getElementById('login')\r\nconsole.log(process.env);\r\nfunction sanitizeInput(input){\r\n    const regex = /^[a-zA-z.]+$/;\r\n    let sanitizedInput = '';\r\n\r\n    for (let i = 0; i <input.length; i++) {\r\n        if (regex.test(input[i])) {\r\n            sanitizedInput += input[i];\r\n        }\r\n    }\r\n    return sanitizedInput\r\n}\r\nif(loginForm){\r\n    document.getElementById('username').addEventListener('input', function(){\r\n        const sanitizedValue = sanitizeInput(this.value);\r\n        this.value = sanitizedValue;\r\n    });\r\n    loginForm.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const username = document.getElementById('username').value;\r\n\r\n        try{\r\n            //post to API\r\n            const response = await fetch(`${apiURL}/login`, {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    username:username\r\n                })\r\n            });\r\n            //wait for response from API\r\n            const data = await response.json();\r\n            \r\n            if (response.ok && data.success){\r\n                sessionStorage.setItem('authToken', data.token);\r\n                console.log(data.token)\r\n                console.log('Authentication successful:', data);\r\n                sessionStorage.setItem('username', username);\r\n                window.location.href = \"Selection.html\";\r\n            }else{\r\n                console.error('Authentication failed: ', data.statusText);\r\n                alert(\"Invalid username, usernames must be between 3 and 20 characters and only contain a full stop no special characters. Please try again\");\r\n            }\r\n        } catch(error) {\r\n            console.error('Error:', error);\r\n            alert('An error has occured, please try again');\r\n        }\r\n    });\r\n}\r\ndocument.querySelectorAll('.activity button').forEach(button =>{\r\n    button.addEventListener('click', function(event){\r\n        const value = event.target.getAttribute('data-value');\r\n        console.log(value)\r\n        sessionStorage.setItem('activitySelection', value);\r\n        if (value == 'Operational'){\r\n            window.location.href = \"Operational.html\"\r\n        }\r\n        else if(value == 'Non-Operational'){\r\n            window.location.href = \"NonOperational.html\"\r\n\r\n        }\r\n    })\r\n})\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const buttons = document.querySelectorAll('.selectable-button');\r\n    const submitButton = document.getElementById('Submit');\r\n    let selectedValue = '';\r\n\r\n    buttons.forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            buttons.forEach(btn => btn.classList.remove('selected'));\r\n            this.classList.add('selected');\r\n            selectedValue = this.getAttribute('data-value');\r\n            sessionStorage.setItem('activity', selectedValue); // Store the selected value in sessionStorage\r\n        });\r\n    });\r\n\r\n    if (submitButton) {\r\n        submitButton.addEventListener('click', async function() {\r\n            const activity = sessionStorage.getItem('activity');  // Retrieve the selected activity\r\n            if (!activity) {\r\n                alert(\"Please select an option before submitting\");\r\n                return;\r\n            }\r\n\r\n            const currentTimeStamp = new Date();  // Get the current timestamp as a Date object\r\n            let username = sessionStorage.getItem('username');\r\n            username = username.replace(/\\./g, ' ');  // Replace dots with spaces\r\n            const activitySelection = sessionStorage.getItem('activitySelection');\r\n\r\n            // Prepare the data object\r\n            const data = {\r\n                timestamp: currentTimeStamp,  // Pass the Date object, NOT a string\r\n                name: username,\r\n                operational: activitySelection,\r\n                activity: activity\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(`${apiURL}/submit`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                });\r\n\r\n                if (response.ok) {\r\n                    console.log('Data submitted successfully');\r\n                    console.log(data);\r\n                    sessionStorage.clear();\r\n                    window.location.href = 'index.html'; \r\n                } else {\r\n                    console.error('Failed to submit data');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error submitting data', error);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction goBack(){\r\n    window.history.back();\r\n}\r\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}